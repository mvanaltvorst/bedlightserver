{"version":3,"sources":["OnOffControls.js","ColorControls.js","InteractiveControls.js","Alarms.js","View.js","Api.js","App.js","serviceWorker.js","index.js"],"names":["OnOffControls","_this","this","react_default","a","createElement","className","onClick","props","onPowerChange","React","Component","PRESET_COLORS","ColorControls","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChangeLiveUpdate","bind","assertThisInitialized","handleColorChange","e","setLiveUpdate","target","checked","color","onColorChange","liveUpdate","updateColor","lib","bgColor","onChangeComplete","disableAlpha","width","presetColors","type","defaultChecked","onChange","InteractiveControls","onInteractiveChange","findAlarmIndexById","alarms","id","nalarms","length","i","Error","value","class","AlarmRow","row","align","concat","time","hour","slice","minute","style","backgroundColor","r","g","b","setSelectedColorAndUpdate","rgb","react_switch_default","interactive","onAlarmInteractiveToggle","onColor","onHandleColor","handleDiameter","uncheckedIcon","checkedIcon","boxShadow","activeBoxShadow","height","enabled","onAlarmEnabledToggle","deleteAlarm","Alarms","state","newTime","newInteractive","newEnabled","newAlarmError","addAlarm","updateAlarm","updateNewInteractive","updateNewEnabled","updateNewTime","api","getAlarms","console","log","setState","updateAlarmsFromServer","splittedTime","split","parseInt","selectedColor","index","_","oldAlarmIndex","oldAlarm","splice","_this2","rows","forEach","push","key","View","src_OnOffControls","src_InteractiveControls","src_ColorControls","src_Alarms","Api","baseUrl","fetch","catch","err","resp","json","data","App","turnedOn","interactiveMode","handlePowerChange","handleInteractiveChange","window","location","origin","turnOn","turnOff","setInteractive","setReadingLight","setBgColor","src_View","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ceadeaa9.chunk.js","sourcesContent":["import React from 'react';\n\nclass OnOffControls extends React.Component {\n    render() {\n        return (\n            <div className=\"OnOffControls\">\n                <button onClick={ () => this.props.onPowerChange(true) }>Turn on</button>\n                <button onClick={ () => this.props.onPowerChange(false) }>Turn off</button>\n            </div>\n        );\n    }\n}\n\nexport default OnOffControls;","import React from 'react';\nimport { SketchPicker } from 'react-color';\n\nconst PRESET_COLORS = [\n    '#000000', \n    '#FFFFFF',\n    '#D0021B', \n    '#F5A623', \n    '#F8E71C', \n    '#7ED321', \n    '#93F927',\n    '#BD10E0', \n    '#9013FE', \n    '#4A90E2', \n    '#50E3C2'\n]\n\nclass ColorControls extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleChangeLiveUpdate = this.handleChangeLiveUpdate.bind(this);\n        this.handleColorChange = this.handleColorChange.bind(this);\n    }\n\n    handleChangeLiveUpdate(e) {\n        this.props.setLiveUpdate(e.target.checked)\n    }\n\n    handleColorChange(color) {\n        this.props.onColorChange(color);\n        if (this.props.liveUpdate) this.props.updateColor();\n    }\n\n    render() {\n        return (\n            <div className=\"ColorControls\">\n                <SketchPicker \n                    color={ this.props.bgColor }\n                    onChangeComplete={ this.handleColorChange }\n                    disableAlpha={ true }\n                    width={ \"95%\" }\n                    presetColors={ PRESET_COLORS }\n                />\n                <br/>\n                <div className=\"ColorControlsButtons\">\n                    <span><input type=\"checkbox\" defaultChecked={ this.props.liveUpdate } onChange={ this.handleChangeLiveUpdate }/> Live update </span>\n                    <button onClick={ this.props.updateColor }>Refresh</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ColorControls;","import React from 'react';\n\nclass InteractiveControls extends React.Component {\n    render() {\n        return (\n            <div className=\"InteractiveControls\">\n                <button onClick={ () => this.props.onInteractiveChange(true) }>Interactive</button>\n                <button onClick={ () => this.props.onInteractiveChange(false) }>Non-interactive</button>\n\n            </div>\n        );\n    }\n}\n\nexport default InteractiveControls;","import React from 'react';\nimport Switch from 'react-switch';\n\nfunction findAlarmIndexById(alarms, id) {\n    let nalarms = alarms.length\n    for (let i = 0; i < nalarms; i++) {\n        if (alarms[i].id === id) {\n            return i;\n        }\n    }\n}\n\nfunction Error(props) {\n    if (props.value === \"\") {\n        return null;\n    } else {\n        return (\n            <div class=\"Error\">\n                { props.value }\n            </div>\n        );\n    }\n}\n\nfunction AlarmRow(props) {\n    let row = props.row;\n    return (\n        <tr>\n            <td align=\"left\" class=\"TimeView\">\n                { `${('0' + row.time.hour).slice(-2)}:${('0' + row.time.minute).slice(-2)}` }\n            </td>\n            <td align=\"middle\">\n                <div \n                    className=\"ColorBox\" \n                    style={{\n                        backgroundColor: `rgb(${row.color.r}, ${row.color.g}, ${row.color.b})`,\n                    }}\n                    onClick={ () => props.setSelectedColorAndUpdate({rgb: {r: row.color.r, g: row.color.g, b: row.color.b}}) }\n                />\n            </td>\n            <td align=\"middle\">\n                {/* <input type=\"checkbox\" data-id={ row.id } checked={row.interactive} onChange={ props.onAlarmInteractiveToggle }/> */}\n                <Switch \n                    id={ row.id } \n                    checked={ row.interactive } \n                    onChange={ props.onAlarmInteractiveToggle }\n                    onColor=\"#86d3ff\"\n                    onHandleColor=\"#2693e6\"\n                    handleDiameter={25}\n                    uncheckedIcon={false}\n                    checkedIcon={true}\n                    boxShadow=\"0px 1px 5px rgba(0, 0, 0, 0.5)\"\n                    activeBoxShadow=\"0px 0px 1px 10px rgba(0, 0, 0, 0.2)\"\n                    height={18}\n                    width={42}\n                />\n            </td>\n            <td align=\"middle\">\n                {/* <input type=\"checkbox\" data-id={ row.id } checked={row.enabled} onChange={ props.onAlarmEnabledToggle }/> */}\n                <Switch \n                    id={ row.id } \n                    checked={ row.enabled } \n                    onChange={ props.onAlarmEnabledToggle } \n                    onColor=\"#86d3ff\"\n                    onHandleColor=\"#2693e6\"\n                    handleDiameter={25}\n                    uncheckedIcon={false}\n                    checkedIcon={true}\n                    boxShadow=\"0px 1px 5px rgba(0, 0, 0, 0.5)\"\n                    activeBoxShadow=\"0px 0px 1px 10px rgba(0, 0, 0, 0.2)\"\n                    height={18}\n                    width={42}\n                />\n            </td>\n            <td align=\"right\">\n                <button onClick={ () => props.deleteAlarm(row.id) }>Remove</button>\n            </td>\n        </tr>\n    );\n}\n\n// class Alarm extends React.Component {\n//     render() {\n//         return (\n//             <div className=\"Alarm\">\n\n//             </div>\n//         );\n//     }\n// }\n\nclass Alarms extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            alarms: [],\n            // alarms: [{\"time\":{\"hour\":9,\"minute\":0},\"color\":{\"r\":80,\"g\":227,\"b\":194},\"interactive\":false,\"enabled\":true,\"id\":1},{\"time\":{\"hour\":9,\"minute\":30},\"color\":{\"r\":255,\"g\":147,\"b\":89},\"interactive\":true,\"enabled\":true,\"id\":3},{\"time\":{\"hour\":20,\"minute\":0},\"color\":{\"r\":255,\"g\":74,\"b\":0},\"interactive\":false,\"enabled\":true,\"id\":4},{\"time\":{\"hour\":21,\"minute\":0},\"color\":{\"r\":255,\"g\":65,\"b\":0},\"interactive\":false,\"enabled\":true,\"id\":5},{\"time\":{\"hour\":23,\"minute\":0},\"color\":{\"r\":255,\"g\":50,\"b\":0},\"interactive\":false,\"enabled\":true,\"id\":6},{\"time\":{\"hour\":12,\"minute\":59},\"color\":{\"r\":229,\"g\":79,\"b\":79},\"interactive\":true,\"enabled\":true,\"id\":7},{\"time\":{\"hour\":12,\"minute\":52},\"color\":{\"r\":255,\"g\":255,\"b\":255},\"interactive\":false,\"enabled\":true,\"id\":8},{\"time\":{\"hour\":4,\"minute\":1},\"color\":{\"r\":76,\"g\":27,\"b\":27},\"interactive\":false,\"enabled\":true,\"id\":9},{\"time\":{\"hour\":4,\"minute\":1},\"color\":{\"r\":76,\"g\":27,\"b\":27},\"interactive\":false,\"enabled\":true,\"id\":10}],\n            newTime: \"\",\n            newInteractive: false,\n            newEnabled: true,\n            newAlarmError: \"\",\n        }\n\n        this.addAlarm = this.addAlarm.bind(this);\n        this.updateAlarm = this.updateAlarm.bind(this);\n        this.onAlarmEnabledToggle = this.onAlarmEnabledToggle.bind(this);\n        this.onAlarmInteractiveToggle = this.onAlarmInteractiveToggle.bind(this);\n        this.deleteAlarm = this.deleteAlarm.bind(this);\n        this.updateNewInteractive = this.updateNewInteractive.bind(this);\n        this.updateNewEnabled = this.updateNewEnabled.bind(this);\n        this.updateNewTime = this.updateNewTime.bind(this);\n    }\n\n    async updateAlarmsFromServer() {\n        let alarms = await this.props.api.getAlarms();\n        console.log(alarms);\n        if (alarms == null) {\n            this.setState({ alarms: [], newAlarmError: \"\" });\n        } else {\n            this.setState({ alarms: alarms, newAlarmError: \"\" });\n        }\n    }\n    \n    async componentWillMount() {\n        await this.updateAlarmsFromServer();\n    }\n\n    async addAlarm(e) {\n        let splittedTime = this.state.newTime.split(\":\");\n        if (splittedTime.length < 2) { // time wasn't filled out\n            this.setState({ newAlarmError: \"Time wasn't filled in\" });\n            return;\n        }\n        let hour = parseInt(splittedTime[0]);\n        let minute = parseInt(splittedTime[1]);\n        await this.props.api.addAlarm(\n            hour, \n            minute, \n            this.props.selectedColor.r, \n            this.props.selectedColor.g, \n            this.props.selectedColor.b, \n            this.state.newInteractive,\n            this.state.newEnabled\n        )\n        await this.updateAlarmsFromServer();\n    }\n\n    updateAlarm(hour, minute, r, g, b, interactive, enabled, id) {\n        console.log(\"Updating alarm\")\n        this.props.api.updateAlarm(hour, minute, r, g, b, interactive, enabled, id);\n        this.setState(state => {\n            let index = findAlarmIndexById(state.alarms, id);\n            state.alarms[index] = {time: {hour: hour, minute: minute}, color: {r: r, g: g, b: b}, enabled: enabled, interactive: interactive, id: id};\n            return state;\n        });\n      }\n\n    onAlarmEnabledToggle(checked, _, id) {\n        // let id = parseInt(e.target.getAttribute(\"data-id\"));\n        // let checked = e.target.checked;\n        let oldAlarmIndex = findAlarmIndexById(this.state.alarms, id);\n        let oldAlarm = this.state.alarms[oldAlarmIndex];\n        this.updateAlarm(\n            oldAlarm.time.hour, \n            oldAlarm.time.minute, \n            oldAlarm.color.r,\n            oldAlarm.color.g,\n            oldAlarm.color.b,\n            oldAlarm.interactive,\n            checked,\n            id\n        );\n    }\n\n    onAlarmInteractiveToggle(checked, _, id) {\n        // let id = parseInt(e.target.getAttribute(\"data-id\"));\n        // let checked= e.target.checked;\n        let oldAlarmIndex = findAlarmIndexById(this.state.alarms, id);\n        let oldAlarm = this.state.alarms[oldAlarmIndex];\n        this.updateAlarm(\n            oldAlarm.time.hour, \n            oldAlarm.time.minute, \n            oldAlarm.color.r,\n            oldAlarm.color.g,\n            oldAlarm.color.b,\n            checked,\n            oldAlarm.enabled,\n            id\n        );\n    }\n\n    deleteAlarm(id) {\n        this.props.api.deleteAlarm(id);\n        this.setState(state => {\n            let index = findAlarmIndexById(state.alarms, id);\n            state.alarms.splice(index, 1)\n            return state;\n        });\n    }\n\n    updateNewInteractive(checked) {\n        this.setState({newInteractive: checked});\n    }\n\n    updateNewEnabled(checked) {\n        this.setState({newEnabled: checked});\n    }\n\n    updateNewTime(e) {\n        this.setState({newTime: e.target.value });\n    }\n\n    render() {\n        let rows = [];\n        this.state.alarms.forEach(row => {\n            rows.push(\n                <AlarmRow \n                    key={ row.id } \n                    row={ row } \n                    onAlarmEnabledToggle={ this.onAlarmEnabledToggle } \n                    onAlarmInteractiveToggle={ this.onAlarmInteractiveToggle } \n                    deleteAlarm={ this.deleteAlarm }\n                    setSelectedColorAndUpdate={ this.props.setSelectedColorAndUpdate }\n                />\n                // <li>\n                //     <Alarm\n                //         key={ row.id } \n                //         row={ row } \n                //         onAlarmEnabledToggle={ this.onAlarmEnabledToggle } \n                //         onAlarmInteractiveToggle={ this.onAlarmInteractiveToggle } \n                //         deleteAlarm={ this.deleteAlarm }\n                //         setSelectedColorAndUpdate={ this.props.setSelectedColorAndUpdate }\n                //     />\n                // </li>\n            )\n        });\n\n        return (\n            <div className=\"Alarms\">\n                {/* <ul>\n                    { rows }\n                </ul> */}\n                <table>\n                    <thead>\n                        <tr>\n                            <th align=\"left\">Time</th>\n                            <th>Color</th>\n                            <th>Interactive</th>\n                            <th>Enabled</th> \n                            {/* <th align=\"right\"></th> */}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        { rows }\n                        <tr>\n                            <td>\n                                <input type=\"time\" id=\"newAlarmTime\" onChange={ this.updateNewTime } />\n                            </td>\n                            <td align=\"middle\">\n                                <div \n                                    className=\"ColorBox\" \n                                    style={{\n                                        backgroundColor: `rgb(${this.props.selectedColor.r}, ${this.props.selectedColor.g}, ${this.props.selectedColor.b})`\n                                    }}\n                                />\n                            </td>\n                            <td align=\"middle\">\n                                <Switch \n                                    checked={ this.state.newInteractive } \n                                    onChange={ this.updateNewInteractive } \n                                    onColor=\"#86d3ff\"\n                                    onHandleColor=\"#2693e6\"\n                                    handleDiameter={25}\n                                    uncheckedIcon={false}\n                                    checkedIcon={true}\n                                    boxShadow=\"0px 1px 5px rgba(0, 0, 0, 0.5)\"\n                                    activeBoxShadow=\"0px 0px 1px 10px rgba(0, 0, 0, 0.2)\"\n                                    height={18}\n                                    width={42}\n                                />\n                            </td>\n                            <td align=\"middle\">\n                                <Switch \n                                    checked={ this.state.newEnabled } \n                                    onChange={ this.updateNewEnabled } \n                                    onColor=\"#86d3ff\"\n                                    onHandleColor=\"#2693e6\"\n                                    handleDiameter={25}\n                                    uncheckedIcon={false}\n                                    checkedIcon={true}\n                                    boxShadow=\"0px 1px 5px rgba(0, 0, 0, 0.5)\"\n                                    activeBoxShadow=\"0px 0px 1px 10px rgba(0, 0, 0, 0.2)\"\n                                    height={18}\n                                    width={42}\n                                />\n                            </td>\n                            <td align=\"right\">\n                                <button onClick={ this.addAlarm }>Add new alarm</button>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n                <Error value={ this.state.newAlarmError } />\n            </div>\n        );\n    }\n}\n\nexport default Alarms;","import React from 'react';\nimport OnOffControls from './OnOffControls.js';\nimport ColorControls from './ColorControls.js';\nimport InteractiveControls from './InteractiveControls.js';\nimport Alarms from './Alarms.js';\n\nclass View extends React.Component {\n    render() {\n        return (\n            <div className=\"View\">\n                <h1>Controls</h1>\n                <OnOffControls onPowerChange={ this.props.onPowerChange }/>\n                <InteractiveControls onInteractiveChange={ this.props.onInteractiveChange } />\n                <ColorControls \n                    bgColor={ this.props.bgColor }\n                    onColorChange={ this.props.onColorChange }\n                    updateColor={ this.props.updateColor }\n                    liveUpdate={ this.props.liveUpdate }\n                    setLiveUpdate={ this.props.setLiveUpdate }\n                />\n                <h1>Alarms</h1>\n                <Alarms \n                    selectedColor={ this.props.bgColor }\n                    api={ this.props.api }\n                    setSelectedColorAndUpdate={ this.props.setSelectedColorAndUpdate }\n                    updateColor={ this.props.updateColor }\n                />\n            </div>\n        );\n    }\n}\n\nexport default View;","\nclass Api {\n    constructor(baseUrl) {\n        this.baseUrl = baseUrl;\n    }\n\n    turnOn() {\n        fetch(`${this.baseUrl}/turnOn`)\n            .catch(err => {\n                console.err(err);\n            });\n    }\n\n    turnOff() {\n        fetch(`${this.baseUrl}/turnOff`)\n            .catch(err => {\n                console.err(err);\n            });\n    }\n\n    setBgColor(bgColor) {\n        fetch(`${this.baseUrl}/bgColor?r=${bgColor.r}&g=${bgColor.g}&b=${bgColor.b}`)\n            .catch(err => {\n                console.err(err);\n            });\n    }\n\n    setInteractive() {\n        fetch(`${this.baseUrl}/interactiveLight`)\n            .catch(err => {\n                console.err(err);\n            });\n    }\n    setReadingLight() {\n        fetch(`${this.baseUrl}/readingLight`)\n            .catch(err => {\n                console.err(err);\n            });\n    }\n\n    async addAlarm(hour, minute, r, g, b, interactive, enabled) {\n        return fetch(`${this.baseUrl}/addAlarm?hour=${hour}&minute=${minute}&r=${r}&g=${g}&b=${b}&enabled=${enabled ? 1 : 0}&interactive=${interactive ? 1 : 0}`)\n            .catch(err => {\n                console.err(err);\n            });\n    }\n\n    deleteAlarm(id) {\n        fetch(`${this.baseUrl}/deleteAlarm?id=${id}`)\n            .catch(err => {\n                console.err(err);\n            });\n    }\n\n    async getAlarms() {\n        let resp = await fetch(`${this.baseUrl}/getAlarms`);\n        let data = await resp.json();\n        return data;\n    }\n\n    updateAlarm(hour, minute, r, g, b, interactive, enabled, id) {\n        fetch(`${this.baseUrl}/updateAlarm?hour=${hour}&minute=${minute}&r=${r}&g=${g}&b=${b}&enabled=${enabled ? 1 : 0}&interactive=${interactive ? 1 : 0}&id=${id}`)\n            .catch(err => {\n                console.err(err);\n            });\n    }\n}\n\nexport default Api;","import React from 'react';\nimport './App.css';\nimport View from './View.js';\nimport Api from './Api.js';\n\nclass App extends React.Component {\n  constructor(props) {\n    super();\n    this.state = {\n      bgColor: {r: 255, g: 255, b: 255},\n      turnedOn: true,\n      interactiveMode: true,\n      liveUpdate: true,\n    };\n\n    this.handlePowerChange = this.handlePowerChange.bind(this);\n    this.handleColorChange = this.handleColorChange.bind(this);\n    this.handleInteractiveChange = this.handleInteractiveChange.bind(this);\n    this.updateColor = this.updateColor.bind(this);\n    this.setLiveUpdate = this.setLiveUpdate.bind(this);\n    this.setSelectedColorAndUpdate = this.setSelectedColorAndUpdate.bind(this);\n\n    this.api = new Api(window.location.origin);\n  }\n\n  handlePowerChange(turnedOn) {\n    console.log(`Turning ${turnedOn ? \"on\" : \"off\"}`)\n    this.setState({ turnedOn: turnedOn });\n    turnedOn ? this.api.turnOn() : this.api.turnOff();\n  }\n\n  handleColorChange(color) {\n    console.log(\"Setting color to\", color);\n    this.setState({ bgColor: {r: color.rgb.r, g: color.rgb.g, b: color.rgb.b}});\n  }\n\n  setSelectedColorAndUpdate(color) {\n    this.setState(\n      { bgColor: {r: color.rgb.r, g: color.rgb.g, b: color.rgb.b}},\n      () => {\n        if (this.state.liveUpdate) this.updateColor();\n      }\n    );\n  }\n\n  handleInteractiveChange(interactive) {\n    console.log(`Turning interactive ${interactive ? \"on\" : \"off\"}`)\n    this.setState({ interactiveMode: interactive });\n    interactive ? this.api.setInteractive() : this.api.setReadingLight();\n  } \n\n  updateColor() {\n    // push color through to API\n    console.log(\"Pushing color to API\", this.state.bgColor);\n    this.api.setBgColor(this.state.bgColor);\n  }\n\n  setLiveUpdate(value) {\n    this.setState({liveUpdate: value});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <View \n          turnedOn = { this.state.turnedOn }\n          bgColor = { this.state.bgColor }\n          interactiveMode = { this.state.interactiveMode }\n          onPowerChange={ this.handlePowerChange }\n          onColorChange={ this.handleColorChange }\n          onInteractiveChange={ this.handleInteractiveChange }\n          updateColor={ this.updateColor }\n          api={ this.api }\n          liveUpdate={ this.state.liveUpdate }\n          setLiveUpdate={ this.setLiveUpdate }\n          setSelectedColorAndUpdate={ this.setSelectedColorAndUpdate }\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["OnOffControls.js","ColorControls.js","InteractiveControls.js","Alarms.js","View.js","Api.js","App.js","serviceWorker.js","index.js"],"names":["OnOffControls","_this","this","react_default","a","createElement","className","onClick","props","onPowerChange","React","Component","PRESET_COLORS","ColorControls","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","liveUpdate","handleChangeLiveUpdate","bind","assertThisInitialized","handleColorChange","e","console","log","target","checked","setState","color","onColorChange","updateColor","lib","bgColor","onChangeComplete","disableAlpha","width","presetColors","type","defaultChecked","onChange","InteractiveControls","onInteractiveChange","findAlarmIndexById","alarms","id","nalarms","length","i","Error","value","class","AlarmRow","row","concat","time","hour","minute","style","backgroundColor","r","g","b","setSelectedColor","rgb","data-id","interactive","onAlarmInteractiveToggle","enabled","onAlarmEnabledToggle","deleteAlarm","Alarms","newTime","newInteractive","newEnabled","newAlarmError","addAlarm","updateAlarm","updateNewInteractive","updateNewEnabled","updateNewTime","api","getAlarms","updateAlarmsFromServer","splittedTime","split","parseInt","selectedColor","index","getAttribute","oldAlarmIndex","oldAlarm","splice","_this2","rows","forEach","push","key","View","src_OnOffControls","src_InteractiveControls","src_ColorControls","src_Alarms","Api","baseUrl","fetch","catch","err","resp","json","data","App","turnedOn","interactiveMode","handlePowerChange","handleInteractiveChange","window","location","origin","turnOn","turnOff","setInteractive","setReadingLight","setBgColor","src_View","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1e98085c.chunk.js","sourcesContent":["import React from 'react';\n\nclass OnOffControls extends React.Component {\n    render() {\n        return (\n            <div className=\"OnOffControls\">\n                <button onClick={ () => this.props.onPowerChange(true) }>Turn on</button>\n                <button onClick={ () => this.props.onPowerChange(false) }>Turn off</button>\n            </div>\n        );\n    }\n}\n\nexport default OnOffControls;","import React from 'react';\nimport { SketchPicker } from 'react-color';\n\nconst PRESET_COLORS = [\n    '#000000', \n    '#FFFFFF',\n    '#D0021B', \n    '#F5A623', \n    '#F8E71C', \n    '#7ED321', \n    '#93F927',\n    '#BD10E0', \n    '#9013FE', \n    '#4A90E2', \n    '#50E3C2'\n]\n\nclass ColorControls extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            liveUpdate: false\n        }\n\n        this.handleChangeLiveUpdate = this.handleChangeLiveUpdate.bind(this);\n        this.handleColorChange = this.handleColorChange.bind(this);\n    }\n\n    handleChangeLiveUpdate(e) {\n        console.log(\"Setting live update to\", e.target.checked);\n        this.setState({ liveUpdate: e.target.checked })\n    }\n\n    handleColorChange(color) {\n        this.props.onColorChange(color);\n        if (this.state.liveUpdate) this.props.updateColor();\n    }\n\n    render() {\n        return (\n            <div className=\"ColorControls\">\n                <SketchPicker \n                    color={ this.props.bgColor }\n                    onChangeComplete={ this.handleColorChange }\n                    disableAlpha={ true }\n                    width={ \"95%\" }\n                    presetColors={ PRESET_COLORS }\n                />\n                <br/>\n                <div className=\"ColorControlsButtons\">\n                    <span><input type=\"checkbox\" defaultChecked={ this.state.liveUpdate } onChange={ this.handleChangeLiveUpdate }/> Live update </span>\n                    <button onClick={ this.props.updateColor }>Refresh</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ColorControls;","import React from 'react';\n\nclass InteractiveControls extends React.Component {\n    render() {\n        return (\n            <div className=\"InteractiveControls\">\n                <button onClick={ () => this.props.onInteractiveChange(true) }>Interactive</button>\n                <button onClick={ () => this.props.onInteractiveChange(false) }>Non-interactive</button>\n\n            </div>\n        );\n    }\n}\n\nexport default InteractiveControls;","import React from 'react';\n\nfunction findAlarmIndexById(alarms, id) {\n    let nalarms = alarms.length\n    for (let i = 0; i < nalarms; i++) {\n        console.log(alarms[i].id, \" \", id);\n        if (alarms[i].id === id) {\n            return i;\n        }\n    }\n}\n\nfunction Error(props) {\n    if (props.value === \"\") {\n        return null;\n    } else {\n        return (\n            <div class=\"Error\">\n                { props.value }\n            </div>\n        );\n    }\n}\n\nfunction AlarmRow(props) {\n    let row = props.row;\n    return (\n        <tr>\n            <td>\n                { `${row.time.hour}:${row.time.minute}` }\n            </td>\n            <td>\n                <div \n                    className=\"ColorBox\" \n                    style={{\n                        backgroundColor: `rgb(${row.color.r}, ${row.color.g}, ${row.color.b})`,\n                    }}\n                    onClick={ () => props.setSelectedColor({rgb: {r: row.color.r, g: row.color.g, b: row.color.b}}) }\n                />\n            </td>\n            <td>\n                <input type=\"checkbox\" data-id={ row.id } checked={row.interactive} onChange={ props.onAlarmInteractiveToggle }/>\n            </td>\n            <td>\n                <input type=\"checkbox\" data-id={ row.id } checked={row.enabled} onChange={ props.onAlarmEnabledToggle }/>\n            </td>\n            <td>\n                <button onClick={ () => props.deleteAlarm(row.id) }>Remove</button>\n            </td>\n        </tr>\n    );\n}\n\nclass Alarms extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            alarms: [{time: {hour: 11, minute: 34}, color: {r: 255, g: 0, b: 0}, interactive: true, enabled: true, id: 1}],\n            newTime: \"\",\n            newInteractive: false,\n            newEnabled: true,\n            // alarms: [],\n            newAlarmError: \"\",\n        }\n\n        this.addAlarm = this.addAlarm.bind(this);\n        this.updateAlarm = this.updateAlarm.bind(this);\n        this.onAlarmEnabledToggle = this.onAlarmEnabledToggle.bind(this);\n        this.onAlarmInteractiveToggle = this.onAlarmInteractiveToggle.bind(this);\n        this.deleteAlarm = this.deleteAlarm.bind(this);\n        this.updateNewInteractive = this.updateNewInteractive.bind(this);\n        this.updateNewEnabled = this.updateNewEnabled.bind(this);\n        this.updateNewTime = this.updateNewTime.bind(this);\n    }\n\n    async updateAlarmsFromServer() {\n        let alarms = await this.props.api.getAlarms();\n        console.log(alarms);\n        if (alarms == null) {\n            this.setState({ alarms: [], newAlarmError: \"\" });\n        } else {\n            this.setState({ alarms: alarms, newAlarmError: \"\" });\n        }\n    }\n    \n    async componentWillMount() {\n        await this.updateAlarmsFromServer();\n    }\n\n    async addAlarm(e) {\n        // this.state.alarms\n        let splittedTime = this.state.newTime.split(\":\");\n        if (splittedTime.length < 2) { // time wasn't filled out\n            this.setState({ newAlarmError: \"Time wasn't filled in\" });\n            return;\n        }\n        let hour = parseInt(splittedTime[0]);\n        let minute = parseInt(splittedTime[1]);\n        this.props.api.addAlarm(\n            hour, \n            minute, \n            this.props.selectedColor.r, \n            this.props.selectedColor.g, \n            this.props.selectedColor.b, \n            this.state.newInteractive,\n            this.state.newEnabled\n        )\n        await this.updateAlarmsFromServer();\n    }\n\n    updateAlarm(hour, minute, r, g, b, interactive, enabled, id) {\n        console.log(\"Updating alarm\")\n        this.props.api.updateAlarm(hour, minute, r, g, b, interactive, enabled, id);\n        this.setState(state => {\n            let index = findAlarmIndexById(state.alarms, id);\n            state.alarms[index] = {time: {hour: hour, minute: minute}, color: {r: r, g: g, b: b}, enabled: enabled, interactive: interactive, id: id};\n            return state;\n        });\n        console.log(this.state.alarms);\n      }\n\n    onAlarmEnabledToggle(e) {\n        let id = parseInt(e.target.getAttribute(\"data-id\"));\n        let checked = e.target.checked;\n        let oldAlarmIndex = findAlarmIndexById(this.state.alarms, id);\n        let oldAlarm = this.state.alarms[oldAlarmIndex];\n        this.updateAlarm(\n            oldAlarm.time.hour, \n            oldAlarm.time.minute, \n            oldAlarm.color.r,\n            oldAlarm.color.g,\n            oldAlarm.color.b,\n            oldAlarm.interactive,\n            checked,\n            id\n        );\n    }\n\n    onAlarmInteractiveToggle(e) {\n        let id = parseInt(e.target.getAttribute(\"data-id\"));\n        let checked= e.target.checked;\n        let oldAlarmIndex = findAlarmIndexById(this.state.alarms, id);\n        let oldAlarm = this.state.alarms[oldAlarmIndex];\n        this.updateAlarm(\n            oldAlarm.time.hour, \n            oldAlarm.time.minute, \n            oldAlarm.color.r,\n            oldAlarm.color.g,\n            oldAlarm.color.b,\n            checked,\n            oldAlarm.enabled,\n            id\n        );\n    }\n\n    deleteAlarm(id) {\n        this.props.api.deleteAlarm(id);\n        this.setState(state => {\n            let index = findAlarmIndexById(state.alarms, id);\n            state.alarms.splice(index, 1)\n            return state;\n        });\n    }\n\n    updateNewInteractive(e) {\n        this.setState({newInteractive: e.target.checked});\n    }\n\n    updateNewEnabled(e) {\n        this.setState({newEnabled: e.target.checked});\n    }\n\n    updateNewTime(e) {\n        this.setState({newTime: e.target.value });\n    }\n\n    render() {\n        let rows = [];\n        this.state.alarms.forEach(row => {\n            console.log(`rgb(${row.color.r}, ${row.color.g}, ${row.color.b})`);\n            rows.push(\n                <AlarmRow \n                    key={ row.id } \n                    row={ row } \n                    onAlarmEnabledToggle={ this.onAlarmEnabledToggle } \n                    onAlarmInteractiveToggle={ this.onAlarmInteractiveToggle } \n                    deleteAlarm={ this.deleteAlarm }\n                    setSelectedColor={ this.props.setSelectedColor }\n                />\n            )\n        });\n\n        return (\n            <div className=\"Alarms\">\n                <table>\n                    <thead>\n                        <tr>\n                            <th>Time</th>\n                            <th>Color</th>\n                            <th>Interactive</th>\n                            <th>Enabled</th> \n                            <th>Remove</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        { rows }\n                    </tbody>\n                </table>\n                <br />\n                <br />\n                <div className=\"AddAlarm\">\n                    <input type=\"time\" id=\"newAlarmTime\" onChange={ this.updateNewTime } />\n                    <div \n                        className=\"ColorBox\" \n                        style={{\n                            backgroundColor: `rgb(${this.props.selectedColor.r}, ${this.props.selectedColor.g}, ${this.props.selectedColor.b})`\n                        }}\n                    />\n                    <input type=\"checkbox\" checked={ this.state.newInteractive } onChange={ this.updateNewInteractive } />\n                    <input type=\"checkbox\" checked={ this.state.newEnabled } onChange={ this.updateNewEnabled } />\n                    <button onClick={ this.addAlarm }>Add new alarm</button>\n                </div>\n                <Error value={ this.state.newAlarmError } />\n            </div>\n        );\n    }\n}\n\nexport default Alarms;","import React from 'react';\nimport OnOffControls from './OnOffControls.js';\nimport ColorControls from './ColorControls.js';\nimport InteractiveControls from './InteractiveControls.js';\nimport Alarms from './Alarms.js';\n\nclass View extends React.Component {\n    render() {\n        return (\n            <div className=\"View\">\n                <h1>Controls</h1>\n                <OnOffControls onPowerChange={ this.props.onPowerChange }/>\n                <InteractiveControls onInteractiveChange={ this.props.onInteractiveChange } />\n                <ColorControls bgColor={ this.props.bgColor } onColorChange={ this.props.onColorChange } updateColor={ this.props.updateColor }/>\n                <h1>Alarms</h1>\n                <Alarms \n                    alarms={ this.props.alarms }\n                    updateAlarm={ this.props.updateAlarm }\n                    selectedColor={ this.props.bgColor }\n                    api={ this.props.api }\n                    setSelectedColor={ this.props.onColorChange }\n                />\n            </div>\n        );\n    }\n}\n\nexport default View;","\nclass Api {\n    constructor(baseUrl) {\n        this.baseUrl = baseUrl;\n    }\n\n    turnOn() {\n        fetch(`${this.baseUrl}/turnOn`)\n            .catch(err => {\n                console.err(err);\n            });\n    }\n\n    turnOff() {\n        fetch(`${this.baseUrl}/turnOff`)\n            .catch(err => {\n                console.err(err);\n            });\n    }\n\n    setBgColor(bgColor) {\n        fetch(`${this.baseUrl}/bgColor?r=${bgColor.r}&g=${bgColor.g}&b=${bgColor.b}`)\n            .catch(err => {\n                console.err(err);\n            });\n    }\n\n    setInteractive() {\n        fetch(`${this.baseUrl}/interactiveLight`)\n            .catch(err => {\n                console.err(err);\n            });\n    }\n    setReadingLight() {\n        fetch(`${this.baseUrl}/readingLight`)\n            .catch(err => {\n                console.err(err);\n            });\n    }\n\n    addAlarm(hour, minute, r, g, b, interactive, enabled) {\n        fetch(`${this.baseUrl}/addAlarm?hour=${hour}&minute=${minute}&r=${r}&g=${g}&b=${b}&enabled=${enabled ? 1 : 0}&interactive=${interactive ? 1 : 0}`)\n            .catch(err => {\n                console.err(err);\n            });\n    }\n\n    deleteAlarm(id) {\n        fetch(`${this.baseUrl}/deleteAlarm?id=${id}`)\n            .catch(err => {\n                console.err(err);\n            });\n    }\n\n    async getAlarms() {\n        let resp = await fetch(`${this.baseUrl}/getAlarms`);\n        let data = await resp.json();\n        return data;\n    }\n\n    updateAlarm(hour, minute, r, g, b, interactive, enabled, id) {\n        fetch(`${this.baseUrl}/updateAlarm?hour=${hour}&minute=${minute}&r=${r}&g=${g}&b=${b}&enabled=${enabled ? 1 : 0}&interactive=${interactive ? 1 : 0}&id=${id}`)\n            .catch(err => {\n                console.err(err);\n            });\n    }\n}\n\nexport default Api;","import React from 'react';\nimport './App.css';\nimport View from './View.js';\nimport Api from './Api.js';\n\nclass App extends React.Component {\n  constructor(props) {\n    super();\n    this.state = {\n      bgColor: {r: 255, g: 255, b: 255},\n      turnedOn: true,\n      interactiveMode: true,\n      // alarms: [{time: {hour: 11, minute: 34}, color: {r: 255, g: 0, b: 0}, interactive: true, enabled: true, id: 1}],\n      // alarms: [],\n    };\n\n    this.handlePowerChange = this.handlePowerChange.bind(this);\n    this.handleColorChange = this.handleColorChange.bind(this);\n    this.handleInteractiveChange = this.handleInteractiveChange.bind(this);\n    this.updateColor = this.updateColor.bind(this);\n\n    this.api = new Api(window.location.origin);\n  }\n\n  handlePowerChange(turnedOn) {\n    console.log(`Turning ${turnedOn ? \"on\" : \"off\"}`)\n    this.setState({ turnedOn: turnedOn });\n    turnedOn ? this.api.turnOn() : this.api.turnOff();\n  }\n\n  handleColorChange(color) {\n    console.log(\"Setting color to\", color);\n    this.setState({ bgColor: {r: color.rgb.r, g: color.rgb.g, b: color.rgb.b}});\n  }\n\n  handleInteractiveChange(interactive) {\n    console.log(`Turning interactive ${interactive ? \"on\" : \"off\"}`)\n    this.setState({ interactiveMode: interactive });\n    interactive ? this.api.setInteractive() : this.api.setReadingLight();\n  } \n\n  updateColor() {\n    // push color through to API\n    console.log(\"Pushing color to API\");\n    this.api.setBgColor(this.state.bgColor);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <View \n          turnedOn = { this.state.turnedOn }\n          bgColor = { this.state.bgColor }\n          interactiveMode = { this.state.interactiveMode }\n          onPowerChange={ this.handlePowerChange }\n          onColorChange={ this.handleColorChange }\n          onInteractiveChange={ this.handleInteractiveChange }\n          updateColor={ this.updateColor }\n          api={ this.api }\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
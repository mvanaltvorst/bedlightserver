{"version":3,"sources":["OnOffControls.js","ColorControls.js","InteractiveControls.js","Alarms.js","View.js","Api.js","App.js","serviceWorker.js","index.js"],"names":["OnOffControls","_this","this","react_default","a","createElement","className","onClick","props","onPowerChange","React","Component","PRESET_COLORS","ColorControls","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChangeLiveUpdate","bind","assertThisInitialized","handleColorChange","e","setLiveUpdate","target","checked","color","onColorChange","liveUpdate","updateColor","lib","bgColor","onChangeComplete","disableAlpha","width","presetColors","type","defaultChecked","onChange","InteractiveControls","onInteractiveChange","findAlarmIndexById","alarms","id","nalarms","length","i","console","log","Error","value","class","AlarmRow","row","concat","time","hour","minute","style","backgroundColor","r","g","b","setSelectedColorAndUpdate","rgb","data-id","interactive","onAlarmInteractiveToggle","enabled","onAlarmEnabledToggle","deleteAlarm","Alarms","state","newTime","newInteractive","newEnabled","newAlarmError","addAlarm","updateAlarm","updateNewInteractive","updateNewEnabled","updateNewTime","api","getAlarms","setState","updateAlarmsFromServer","splittedTime","split","parseInt","selectedColor","index","getAttribute","oldAlarmIndex","oldAlarm","splice","_this2","rows","forEach","push","key","View","src_OnOffControls","src_InteractiveControls","src_ColorControls","src_Alarms","Api","baseUrl","fetch","catch","err","resp","json","data","App","turnedOn","interactiveMode","handlePowerChange","handleInteractiveChange","window","location","origin","turnOn","turnOff","setInteractive","setReadingLight","setBgColor","src_View","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b5a499e3.chunk.js","sourcesContent":["import React from 'react';\n\nclass OnOffControls extends React.Component {\n    render() {\n        return (\n            <div className=\"OnOffControls\">\n                <button onClick={ () => this.props.onPowerChange(true) }>Turn on</button>\n                <button onClick={ () => this.props.onPowerChange(false) }>Turn off</button>\n            </div>\n        );\n    }\n}\n\nexport default OnOffControls;","import React from 'react';\nimport { SketchPicker } from 'react-color';\n\nconst PRESET_COLORS = [\n    '#000000', \n    '#FFFFFF',\n    '#D0021B', \n    '#F5A623', \n    '#F8E71C', \n    '#7ED321', \n    '#93F927',\n    '#BD10E0', \n    '#9013FE', \n    '#4A90E2', \n    '#50E3C2'\n]\n\nclass ColorControls extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleChangeLiveUpdate = this.handleChangeLiveUpdate.bind(this);\n        this.handleColorChange = this.handleColorChange.bind(this);\n    }\n\n    handleChangeLiveUpdate(e) {\n        this.props.setLiveUpdate(e.target.checked)\n    }\n\n    handleColorChange(color) {\n        this.props.onColorChange(color);\n        if (this.props.liveUpdate) this.props.updateColor();\n    }\n\n    render() {\n        return (\n            <div className=\"ColorControls\">\n                <SketchPicker \n                    color={ this.props.bgColor }\n                    onChangeComplete={ this.handleColorChange }\n                    disableAlpha={ true }\n                    width={ \"95%\" }\n                    presetColors={ PRESET_COLORS }\n                />\n                <br/>\n                <div className=\"ColorControlsButtons\">\n                    <span><input type=\"checkbox\" defaultChecked={ this.props.liveUpdate } onChange={ this.handleChangeLiveUpdate }/> Live update </span>\n                    <button onClick={ this.props.updateColor }>Refresh</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ColorControls;","import React from 'react';\n\nclass InteractiveControls extends React.Component {\n    render() {\n        return (\n            <div className=\"InteractiveControls\">\n                <button onClick={ () => this.props.onInteractiveChange(true) }>Interactive</button>\n                <button onClick={ () => this.props.onInteractiveChange(false) }>Non-interactive</button>\n\n            </div>\n        );\n    }\n}\n\nexport default InteractiveControls;","import React from 'react';\n\nfunction findAlarmIndexById(alarms, id) {\n    let nalarms = alarms.length\n    for (let i = 0; i < nalarms; i++) {\n        console.log(alarms[i].id, \" \", id);\n        if (alarms[i].id === id) {\n            return i;\n        }\n    }\n}\n\nfunction Error(props) {\n    if (props.value === \"\") {\n        return null;\n    } else {\n        return (\n            <div class=\"Error\">\n                { props.value }\n            </div>\n        );\n    }\n}\n\nfunction AlarmRow(props) {\n    let row = props.row;\n    return (\n        <tr>\n            <td>\n                { `${row.time.hour}:${row.time.minute}` }\n            </td>\n            <td>\n                <div \n                    className=\"ColorBox\" \n                    style={{\n                        backgroundColor: `rgb(${row.color.r}, ${row.color.g}, ${row.color.b})`,\n                    }}\n                    onClick={ () => props.setSelectedColorAndUpdate({rgb: {r: row.color.r, g: row.color.g, b: row.color.b}}) }\n                />\n            </td>\n            <td>\n                <input type=\"checkbox\" data-id={ row.id } checked={row.interactive} onChange={ props.onAlarmInteractiveToggle }/>\n            </td>\n            <td>\n                <input type=\"checkbox\" data-id={ row.id } checked={row.enabled} onChange={ props.onAlarmEnabledToggle }/>\n            </td>\n            <td>\n                <button onClick={ () => props.deleteAlarm(row.id) }>Remove</button>\n            </td>\n        </tr>\n    );\n}\n\nclass Alarms extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            alarms: [{time: {hour: 11, minute: 34}, color: {r: 255, g: 0, b: 0}, interactive: true, enabled: true, id: 1}],\n            newTime: \"\",\n            newInteractive: false,\n            newEnabled: true,\n            // alarms: [],\n            newAlarmError: \"\",\n        }\n\n        this.addAlarm = this.addAlarm.bind(this);\n        this.updateAlarm = this.updateAlarm.bind(this);\n        this.onAlarmEnabledToggle = this.onAlarmEnabledToggle.bind(this);\n        this.onAlarmInteractiveToggle = this.onAlarmInteractiveToggle.bind(this);\n        this.deleteAlarm = this.deleteAlarm.bind(this);\n        this.updateNewInteractive = this.updateNewInteractive.bind(this);\n        this.updateNewEnabled = this.updateNewEnabled.bind(this);\n        this.updateNewTime = this.updateNewTime.bind(this);\n    }\n\n    async updateAlarmsFromServer() {\n        let alarms = await this.props.api.getAlarms();\n        console.log(alarms);\n        if (alarms == null) {\n            this.setState({ alarms: [], newAlarmError: \"\" });\n        } else {\n            this.setState({ alarms: alarms, newAlarmError: \"\" });\n        }\n    }\n    \n    async componentWillMount() {\n        await this.updateAlarmsFromServer();\n    }\n\n    async addAlarm(e) {\n        // this.state.alarms\n        let splittedTime = this.state.newTime.split(\":\");\n        if (splittedTime.length < 2) { // time wasn't filled out\n            this.setState({ newAlarmError: \"Time wasn't filled in\" });\n            return;\n        }\n        let hour = parseInt(splittedTime[0]);\n        let minute = parseInt(splittedTime[1]);\n        this.props.api.addAlarm(\n            hour, \n            minute, \n            this.props.selectedColor.r, \n            this.props.selectedColor.g, \n            this.props.selectedColor.b, \n            this.state.newInteractive,\n            this.state.newEnabled\n        )\n        await this.updateAlarmsFromServer();\n    }\n\n    updateAlarm(hour, minute, r, g, b, interactive, enabled, id) {\n        console.log(\"Updating alarm\")\n        this.props.api.updateAlarm(hour, minute, r, g, b, interactive, enabled, id);\n        this.setState(state => {\n            let index = findAlarmIndexById(state.alarms, id);\n            state.alarms[index] = {time: {hour: hour, minute: minute}, color: {r: r, g: g, b: b}, enabled: enabled, interactive: interactive, id: id};\n            return state;\n        });\n        console.log(this.state.alarms);\n      }\n\n    onAlarmEnabledToggle(e) {\n        let id = parseInt(e.target.getAttribute(\"data-id\"));\n        let checked = e.target.checked;\n        let oldAlarmIndex = findAlarmIndexById(this.state.alarms, id);\n        let oldAlarm = this.state.alarms[oldAlarmIndex];\n        this.updateAlarm(\n            oldAlarm.time.hour, \n            oldAlarm.time.minute, \n            oldAlarm.color.r,\n            oldAlarm.color.g,\n            oldAlarm.color.b,\n            oldAlarm.interactive,\n            checked,\n            id\n        );\n    }\n\n    onAlarmInteractiveToggle(e) {\n        let id = parseInt(e.target.getAttribute(\"data-id\"));\n        let checked= e.target.checked;\n        let oldAlarmIndex = findAlarmIndexById(this.state.alarms, id);\n        let oldAlarm = this.state.alarms[oldAlarmIndex];\n        this.updateAlarm(\n            oldAlarm.time.hour, \n            oldAlarm.time.minute, \n            oldAlarm.color.r,\n            oldAlarm.color.g,\n            oldAlarm.color.b,\n            checked,\n            oldAlarm.enabled,\n            id\n        );\n    }\n\n    deleteAlarm(id) {\n        this.props.api.deleteAlarm(id);\n        this.setState(state => {\n            let index = findAlarmIndexById(state.alarms, id);\n            state.alarms.splice(index, 1)\n            return state;\n        });\n    }\n\n    updateNewInteractive(e) {\n        this.setState({newInteractive: e.target.checked});\n    }\n\n    updateNewEnabled(e) {\n        this.setState({newEnabled: e.target.checked});\n    }\n\n    updateNewTime(e) {\n        this.setState({newTime: e.target.value });\n    }\n\n    render() {\n        let rows = [];\n        this.state.alarms.forEach(row => {\n            console.log(`rgb(${row.color.r}, ${row.color.g}, ${row.color.b})`);\n            rows.push(\n                <AlarmRow \n                    key={ row.id } \n                    row={ row } \n                    onAlarmEnabledToggle={ this.onAlarmEnabledToggle } \n                    onAlarmInteractiveToggle={ this.onAlarmInteractiveToggle } \n                    deleteAlarm={ this.deleteAlarm }\n                    setSelectedColorAndUpdate={ this.props.setSelectedColorAndUpdate }\n                />\n            )\n        });\n\n        return (\n            <div className=\"Alarms\">\n                <table>\n                    <thead>\n                        <tr>\n                            <th>Time</th>\n                            <th>Color</th>\n                            <th>Interactive</th>\n                            <th>Enabled</th> \n                            <th>Remove</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        { rows }\n                    </tbody>\n                </table>\n                <br />\n                <br />\n                <div className=\"AddAlarm\">\n                    <input type=\"time\" id=\"newAlarmTime\" onChange={ this.updateNewTime } />\n                    <div \n                        className=\"ColorBox\" \n                        style={{\n                            backgroundColor: `rgb(${this.props.selectedColor.r}, ${this.props.selectedColor.g}, ${this.props.selectedColor.b})`\n                        }}\n                    />\n                    <input type=\"checkbox\" checked={ this.state.newInteractive } onChange={ this.updateNewInteractive } />\n                    <input type=\"checkbox\" checked={ this.state.newEnabled } onChange={ this.updateNewEnabled } />\n                    <button onClick={ this.addAlarm }>Add new alarm</button>\n                </div>\n                <Error value={ this.state.newAlarmError } />\n            </div>\n        );\n    }\n}\n\nexport default Alarms;","import React from 'react';\nimport OnOffControls from './OnOffControls.js';\nimport ColorControls from './ColorControls.js';\nimport InteractiveControls from './InteractiveControls.js';\nimport Alarms from './Alarms.js';\n\nclass View extends React.Component {\n    render() {\n        return (\n            <div className=\"View\">\n                <h1>Controls</h1>\n                <OnOffControls onPowerChange={ this.props.onPowerChange }/>\n                <InteractiveControls onInteractiveChange={ this.props.onInteractiveChange } />\n                <ColorControls \n                    bgColor={ this.props.bgColor }\n                    onColorChange={ this.props.onColorChange }\n                    updateColor={ this.props.updateColor }\n                    liveUpdate={ this.props.liveUpdate }\n                    setLiveUpdate={ this.props.setLiveUpdate }\n                />\n                <h1>Alarms</h1>\n                <Alarms \n                    selectedColor={ this.props.bgColor }\n                    api={ this.props.api }\n                    setSelectedColorAndUpdate={ this.props.setSelectedColorAndUpdate }\n                    updateColor={ this.props.updateColor }\n                />\n            </div>\n        );\n    }\n}\n\nexport default View;","\nclass Api {\n    constructor(baseUrl) {\n        this.baseUrl = baseUrl;\n    }\n\n    turnOn() {\n        fetch(`${this.baseUrl}/turnOn`)\n            .catch(err => {\n                console.err(err);\n            });\n    }\n\n    turnOff() {\n        fetch(`${this.baseUrl}/turnOff`)\n            .catch(err => {\n                console.err(err);\n            });\n    }\n\n    setBgColor(bgColor) {\n        fetch(`${this.baseUrl}/bgColor?r=${bgColor.r}&g=${bgColor.g}&b=${bgColor.b}`)\n            .catch(err => {\n                console.err(err);\n            });\n    }\n\n    setInteractive() {\n        fetch(`${this.baseUrl}/interactiveLight`)\n            .catch(err => {\n                console.err(err);\n            });\n    }\n    setReadingLight() {\n        fetch(`${this.baseUrl}/readingLight`)\n            .catch(err => {\n                console.err(err);\n            });\n    }\n\n    addAlarm(hour, minute, r, g, b, interactive, enabled) {\n        fetch(`${this.baseUrl}/addAlarm?hour=${hour}&minute=${minute}&r=${r}&g=${g}&b=${b}&enabled=${enabled ? 1 : 0}&interactive=${interactive ? 1 : 0}`)\n            .catch(err => {\n                console.err(err);\n            });\n    }\n\n    deleteAlarm(id) {\n        fetch(`${this.baseUrl}/deleteAlarm?id=${id}`)\n            .catch(err => {\n                console.err(err);\n            });\n    }\n\n    async getAlarms() {\n        let resp = await fetch(`${this.baseUrl}/getAlarms`);\n        let data = await resp.json();\n        return data;\n    }\n\n    updateAlarm(hour, minute, r, g, b, interactive, enabled, id) {\n        fetch(`${this.baseUrl}/updateAlarm?hour=${hour}&minute=${minute}&r=${r}&g=${g}&b=${b}&enabled=${enabled ? 1 : 0}&interactive=${interactive ? 1 : 0}&id=${id}`)\n            .catch(err => {\n                console.err(err);\n            });\n    }\n}\n\nexport default Api;","import React from 'react';\nimport './App.css';\nimport View from './View.js';\nimport Api from './Api.js';\n\nclass App extends React.Component {\n  constructor(props) {\n    super();\n    this.state = {\n      bgColor: {r: 255, g: 255, b: 255},\n      turnedOn: true,\n      interactiveMode: true,\n      liveUpdate: false,\n    };\n\n    this.handlePowerChange = this.handlePowerChange.bind(this);\n    this.handleColorChange = this.handleColorChange.bind(this);\n    this.handleInteractiveChange = this.handleInteractiveChange.bind(this);\n    this.updateColor = this.updateColor.bind(this);\n    this.setLiveUpdate = this.setLiveUpdate.bind(this);\n    this.setSelectedColorAndUpdate = this.setSelectedColorAndUpdate.bind(this);\n\n    this.api = new Api(window.location.origin);\n  }\n\n  handlePowerChange(turnedOn) {\n    console.log(`Turning ${turnedOn ? \"on\" : \"off\"}`)\n    this.setState({ turnedOn: turnedOn });\n    turnedOn ? this.api.turnOn() : this.api.turnOff();\n  }\n\n  handleColorChange(color) {\n    console.log(\"Setting color to\", color);\n    this.setState({ bgColor: {r: color.rgb.r, g: color.rgb.g, b: color.rgb.b}});\n  }\n\n  setSelectedColorAndUpdate(color) {\n    this.setState(\n      { bgColor: {r: color.rgb.r, g: color.rgb.g, b: color.rgb.b}},\n      () => {\n        if (this.state.liveUpdate) this.updateColor();\n      }\n    );\n  }\n\n  handleInteractiveChange(interactive) {\n    console.log(`Turning interactive ${interactive ? \"on\" : \"off\"}`)\n    this.setState({ interactiveMode: interactive });\n    interactive ? this.api.setInteractive() : this.api.setReadingLight();\n  } \n\n  updateColor() {\n    // push color through to API\n    console.log(\"Pushing color to API\", this.state.bgColor);\n    this.api.setBgColor(this.state.bgColor);\n  }\n\n  setLiveUpdate(value) {\n    this.setState({liveUpdate: value});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <View \n          turnedOn = { this.state.turnedOn }\n          bgColor = { this.state.bgColor }\n          interactiveMode = { this.state.interactiveMode }\n          onPowerChange={ this.handlePowerChange }\n          onColorChange={ this.handleColorChange }\n          onInteractiveChange={ this.handleInteractiveChange }\n          updateColor={ this.updateColor }\n          api={ this.api }\n          liveUpdate={ this.state.liveUpdate }\n          setLiveUpdate={ this.setLiveUpdate }\n          setSelectedColorAndUpdate={ this.setSelectedColorAndUpdate }\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}